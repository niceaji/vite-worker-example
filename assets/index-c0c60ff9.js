(function(){const m=document.createElement("link").relList;if(m&&m.supports&&m.supports("modulepreload"))return;for(const l of document.querySelectorAll('link[rel="modulepreload"]'))c(l);new MutationObserver(l=>{for(const Z of l)if(Z.type==="childList")for(const b of Z.addedNodes)b.tagName==="LINK"&&b.rel==="modulepreload"&&c(b)}).observe(document,{childList:!0,subtree:!0});function X(l){const Z={};return l.integrity&&(Z.integrity=l.integrity),l.referrerPolicy&&(Z.referrerPolicy=l.referrerPolicy),l.crossOrigin==="use-credentials"?Z.credentials="include":l.crossOrigin==="anonymous"?Z.credentials="omit":Z.credentials="same-origin",Z}function c(l){if(l.ep)return;l.ep=!0;const Z=X(l);fetch(l.href,Z)}})();const G="",d=typeof window<"u"&&window.Blob&&new Blob([atob(G)],{type:"text/javascript;charset=utf-8"});function W(){let i;try{if(i=d&&(window.URL||window.webkitURL).createObjectURL(d),!i)throw"";return new Worker(i)}catch{return new Worker("data:application/javascript;base64,"+G)}finally{i&&(window.URL||window.webkitURL).revokeObjectURL(i)}}document.querySelector("#app").innerHTML=`
<h1>Web Worker! OCR with Tesseract.js</h1>

Image URL <input type="text" value="https://tesseract.projectnaptha.com/img/eng_bw.png" />
<button>OCR</button>
<hr />
<a target="_blank"> <img src="" height="100"/> </a>
<textarea style="width:100%;height:300px"></textarea>
`;const I=new W;I.addEventListener("message",i=>{console.log("main.js: message received from worker.js"),console.log(i.data),document.querySelector("textarea").value=i.data});document.querySelector("button").addEventListener("click",()=>{const i=document.querySelector("input").value;document.querySelector("img").src=i,document.querySelector("a").href=i,I.postMessage(i)});
